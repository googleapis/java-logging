/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging.proto

package com.google.logging.v2;

public interface TailLogEntriesResponseOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.logging.v2.TailLogEntriesResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * A list of log entries. Each response in the stream will order entries with
   * increasing values of `LogEntry.timestamp`. Ordering is not guaranteed
   * between separate responses.
   * </pre>
   *
   * <code>repeated .google.logging.v2.LogEntry entries = 1;</code>
   */
  java.util.List<com.google.logging.v2.LogEntry> getEntriesList();
  /**
   *
   *
   * <pre>
   * A list of log entries. Each response in the stream will order entries with
   * increasing values of `LogEntry.timestamp`. Ordering is not guaranteed
   * between separate responses.
   * </pre>
   *
   * <code>repeated .google.logging.v2.LogEntry entries = 1;</code>
   */
  com.google.logging.v2.LogEntry getEntries(int index);
  /**
   *
   *
   * <pre>
   * A list of log entries. Each response in the stream will order entries with
   * increasing values of `LogEntry.timestamp`. Ordering is not guaranteed
   * between separate responses.
   * </pre>
   *
   * <code>repeated .google.logging.v2.LogEntry entries = 1;</code>
   */
  int getEntriesCount();
  /**
   *
   *
   * <pre>
   * A list of log entries. Each response in the stream will order entries with
   * increasing values of `LogEntry.timestamp`. Ordering is not guaranteed
   * between separate responses.
   * </pre>
   *
   * <code>repeated .google.logging.v2.LogEntry entries = 1;</code>
   */
  java.util.List<? extends com.google.logging.v2.LogEntryOrBuilder> getEntriesOrBuilderList();
  /**
   *
   *
   * <pre>
   * A list of log entries. Each response in the stream will order entries with
   * increasing values of `LogEntry.timestamp`. Ordering is not guaranteed
   * between separate responses.
   * </pre>
   *
   * <code>repeated .google.logging.v2.LogEntry entries = 1;</code>
   */
  com.google.logging.v2.LogEntryOrBuilder getEntriesOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * If entries that otherwise would have been included in the session were not
   * sent back to the client, counts of relevant entries omitted from the
   * session with the reason that they were not included. There will be at most
   * one of each reason per response. The counts represent the number of
   * suppressed entries since the last streamed response.
   * </pre>
   *
   * <code>repeated .google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2;
   * </code>
   */
  java.util.List<com.google.logging.v2.TailLogEntriesResponse.SuppressionInfo>
      getSuppressionInfoList();
  /**
   *
   *
   * <pre>
   * If entries that otherwise would have been included in the session were not
   * sent back to the client, counts of relevant entries omitted from the
   * session with the reason that they were not included. There will be at most
   * one of each reason per response. The counts represent the number of
   * suppressed entries since the last streamed response.
   * </pre>
   *
   * <code>repeated .google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2;
   * </code>
   */
  com.google.logging.v2.TailLogEntriesResponse.SuppressionInfo getSuppressionInfo(int index);
  /**
   *
   *
   * <pre>
   * If entries that otherwise would have been included in the session were not
   * sent back to the client, counts of relevant entries omitted from the
   * session with the reason that they were not included. There will be at most
   * one of each reason per response. The counts represent the number of
   * suppressed entries since the last streamed response.
   * </pre>
   *
   * <code>repeated .google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2;
   * </code>
   */
  int getSuppressionInfoCount();
  /**
   *
   *
   * <pre>
   * If entries that otherwise would have been included in the session were not
   * sent back to the client, counts of relevant entries omitted from the
   * session with the reason that they were not included. There will be at most
   * one of each reason per response. The counts represent the number of
   * suppressed entries since the last streamed response.
   * </pre>
   *
   * <code>repeated .google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2;
   * </code>
   */
  java.util.List<? extends com.google.logging.v2.TailLogEntriesResponse.SuppressionInfoOrBuilder>
      getSuppressionInfoOrBuilderList();
  /**
   *
   *
   * <pre>
   * If entries that otherwise would have been included in the session were not
   * sent back to the client, counts of relevant entries omitted from the
   * session with the reason that they were not included. There will be at most
   * one of each reason per response. The counts represent the number of
   * suppressed entries since the last streamed response.
   * </pre>
   *
   * <code>repeated .google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2;
   * </code>
   */
  com.google.logging.v2.TailLogEntriesResponse.SuppressionInfoOrBuilder getSuppressionInfoOrBuilder(
      int index);
}
