custom_content: |
  #### Creating an authorized service object
  To make authenticated requests to Stackdriver Logging, you must create a service object with
  credentials. You can then make API calls by calling methods on the Logging service object. The
  simplest way to authenticate is to use
  [Application Default Credentials](https://developers.google.com/identity/protocols/application-default-credentials).
  These credentials are automatically inferred from your environment, so you only need the following
  code to create your service object:

  ```java
  import com.google.cloud.logging.Logging;
  import com.google.cloud.logging.LoggingOptions;

  LoggingOptions options = LoggingOptions.getDefaultInstance();
  try(Logging logging = options.getService()) {
    // use logging here
  }
  ```

  For other authentication options, see the
  [Authentication](https://github.com/googleapis/google-cloud-java#authentication) page.

  #### Creating a metric
  With Logging you can create logs-based metrics. Logs-based metrics allow to keep track of the number
  of log messages associated to specific events. Add the following imports at the top of your file:

  ```java
  import com.google.cloud.logging.Metric;
  import com.google.cloud.logging.MetricInfo;
  ```
  Then, to create the metric, use the following code:

  ```java
  MetricInfo metricInfo = MetricInfo.newBuilder("test-metric", "severity >= ERROR")
      .setDescription("Log entries with severity higher or equal to ERROR")
      .build();
  logging.create(metricInfo);
  ```

  #### Writing log entries
  With Logging you can also write custom log entries. Add the following imports at the top of your
  file:
  ```java
  import com.google.cloud.MonitoredResource;
  import com.google.cloud.logging.LogEntry;
  import com.google.cloud.logging.Logging;
  import com.google.cloud.logging.Payload.StringPayload;

  import java.util.Collections;
  ```
  Then, to write the log entries, use the following code:
  ```java
  LogEntry firstEntry = LogEntry.newBuilder(StringPayload.of("message"))
      .setLogName("test-log")
      .setResource(MonitoredResource.newBuilder("global")
          .addLabel("project_id", options.getProjectId())
          .build())
      .build();
  logging.write(Collections.singleton(firstEntry));
  ```

  #### Listing log entries
  With Logging you can also list log entries that have been previously written. Add the following
  imports at the top of your file:
  ```java
  import com.google.cloud.Page;
  import com.google.cloud.logging.LogEntry;
  import com.google.cloud.logging.Logging.EntryListOption;
  ```
  Then, to list the log entries, use the following code:

  ``` java
  Page<LogEntry> entries = logging.listLogEntries(
      EntryListOption.filter("logName=projects/" + options.getProjectId() + "/logs/test-log"));
  Iterator<LogEntry> entryIterator = entries.iterateAll().iterator();
  while (entryIterator.hasNext()) {
    System.out.println(entryIterator.next());
  }
  ```

  #### Add a Stackdriver Logging handler to a logger
  You can also register a `LoggingHandler` to a `java.util.logging.Logger` that publishes log entries
  to Stackdriver Logging. Given the following logger:
  ```java
  private final static Logger LOGGER = Logger.getLogger(MyClass.class.getName());
  ```
  You can register a `LoggingHandler` with the code:
  ```java
  LoggingHandler.addHandler(LOGGER, new LoggingHandler());
  ```
  After that, logs generated using `LOGGER` will be also directed to Stackdriver Logging.

  Notice that you can also register a `LoggingHandler` via the `logging.properties` configuration
  file. Adding, for instance, the following line:
  ```
  com.google.cloud.examples.logging.snippets.AddLoggingHandler.handlers=com.google.cloud.logging.LoggingHandler
  ```
  #### Complete source code

  In
  [CreateAndListMetrics.java](https://github.com/googleapis/google-cloud-java/tree/master/google-cloud-examples/src/main/java/com/google/cloud/examples/logging/snippets/CreateAndListMetrics.java),
  [WriteAndListLogEntries.java](https://github.com/googleapis/google-cloud-java/tree/master/google-cloud-examples/src/main/java/com/google/cloud/examples/logging/snippets/WriteAndListLogEntries.java)
  and
  [AddLoggingHandler.java](https://github.com/googleapis/google-cloud-java/tree/master/google-cloud-examples/src/main/java/com/google/cloud/examples/logging/snippets/AddLoggingHandler.java)
  we put together all the code shown above into three programs. The programs assume that you are
  running on Compute Engine or from your own desktop.