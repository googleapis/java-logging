// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

package com.google.logging.v2;

/**
 * <pre>
 * List of different operation states.
 * High level state of the operation. This is used to report the job's
 * current state to the user. Once a long running operation is created,
 * the current state of the operation can be queried even before the
 * operation is finished and the final result is available.
 * </pre>
 *
 * Protobuf enum {@code google.logging.v2.OperationState}
 */
public enum OperationState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Should not be used.
   * </pre>
   *
   * <code>OPERATION_STATE_UNSPECIFIED = 0;</code>
   */
  OPERATION_STATE_UNSPECIFIED(0),
  /**
   * <pre>
   * The operation is scheduled.
   * </pre>
   *
   * <code>OPERATION_STATE_SCHEDULED = 1;</code>
   */
  OPERATION_STATE_SCHEDULED(1),
  /**
   * <pre>
   * Waiting for necessary permissions.
   * </pre>
   *
   * <code>OPERATION_STATE_WAITING_FOR_PERMISSIONS = 2;</code>
   */
  OPERATION_STATE_WAITING_FOR_PERMISSIONS(2),
  /**
   * <pre>
   * The operation is running.
   * </pre>
   *
   * <code>OPERATION_STATE_RUNNING = 3;</code>
   */
  OPERATION_STATE_RUNNING(3),
  /**
   * <pre>
   * The operation was completed successfully.
   * </pre>
   *
   * <code>OPERATION_STATE_SUCCEEDED = 4;</code>
   */
  OPERATION_STATE_SUCCEEDED(4),
  /**
   * <pre>
   * The operation failed.
   * </pre>
   *
   * <code>OPERATION_STATE_FAILED = 5;</code>
   */
  OPERATION_STATE_FAILED(5),
  /**
   * <pre>
   * The operation was cancelled by the user.
   * </pre>
   *
   * <code>OPERATION_STATE_CANCELLED = 6;</code>
   */
  OPERATION_STATE_CANCELLED(6),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Should not be used.
   * </pre>
   *
   * <code>OPERATION_STATE_UNSPECIFIED = 0;</code>
   */
  public static final int OPERATION_STATE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The operation is scheduled.
   * </pre>
   *
   * <code>OPERATION_STATE_SCHEDULED = 1;</code>
   */
  public static final int OPERATION_STATE_SCHEDULED_VALUE = 1;
  /**
   * <pre>
   * Waiting for necessary permissions.
   * </pre>
   *
   * <code>OPERATION_STATE_WAITING_FOR_PERMISSIONS = 2;</code>
   */
  public static final int OPERATION_STATE_WAITING_FOR_PERMISSIONS_VALUE = 2;
  /**
   * <pre>
   * The operation is running.
   * </pre>
   *
   * <code>OPERATION_STATE_RUNNING = 3;</code>
   */
  public static final int OPERATION_STATE_RUNNING_VALUE = 3;
  /**
   * <pre>
   * The operation was completed successfully.
   * </pre>
   *
   * <code>OPERATION_STATE_SUCCEEDED = 4;</code>
   */
  public static final int OPERATION_STATE_SUCCEEDED_VALUE = 4;
  /**
   * <pre>
   * The operation failed.
   * </pre>
   *
   * <code>OPERATION_STATE_FAILED = 5;</code>
   */
  public static final int OPERATION_STATE_FAILED_VALUE = 5;
  /**
   * <pre>
   * The operation was cancelled by the user.
   * </pre>
   *
   * <code>OPERATION_STATE_CANCELLED = 6;</code>
   */
  public static final int OPERATION_STATE_CANCELLED_VALUE = 6;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static OperationState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static OperationState forNumber(int value) {
    switch (value) {
      case 0: return OPERATION_STATE_UNSPECIFIED;
      case 1: return OPERATION_STATE_SCHEDULED;
      case 2: return OPERATION_STATE_WAITING_FOR_PERMISSIONS;
      case 3: return OPERATION_STATE_RUNNING;
      case 4: return OPERATION_STATE_SUCCEEDED;
      case 5: return OPERATION_STATE_FAILED;
      case 6: return OPERATION_STATE_CANCELLED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OperationState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OperationState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OperationState>() {
          public OperationState findValueByNumber(int number) {
            return OperationState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.logging.v2.LoggingConfigProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final OperationState[] VALUES = values();

  public static OperationState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OperationState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.logging.v2.OperationState)
}

